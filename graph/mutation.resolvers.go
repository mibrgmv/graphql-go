package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.72

import (
	"context"
	"crypto/rand"
	"errors"
	"fmt"
	"graphql-go/graph/model"
	"math/big"
)

// TodoCreate is the resolver for the todoCreate field.
func (r *mutationResolver) TodoCreate(ctx context.Context, input model.NewTodo) (*model.Todo, error) {
	randNumber, _ := rand.Int(rand.Reader, big.NewInt(100))
	todo := &model.Todo{
		Text: input.Text,
		ID:   fmt.Sprintf("T%d", randNumber),
	}
	r.todos = append(r.todos, todo)
	return todo, nil
}

// TodoComplete is the resolver for the todoComplete field.
func (r *mutationResolver) TodoComplete(ctx context.Context, id int32, updatedBy int32) (*model.Todo, error) {
	var todo *model.Todo
	for i, t := range r.todos {
		if fmt.Sprintf("%v", id) == t.ID {
			r.todos[i].Done = true
			todo = r.todos[i]
			break
		}
	}
	if todo == nil {
		return nil, errors.New("todo not found")
	}

	userExists := false
	for _, u := range r.users {
		if fmt.Sprintf("%v", updatedBy) == u.ID {
			userExists = true
			break
		}
	}
	if !userExists {
		return nil, errors.New("user not found")
	}

	return todo, nil
}

// TodoDelete is the resolver for the todoDelete field.
func (r *mutationResolver) TodoDelete(ctx context.Context, id int32, updatedBy int32) (*model.Todo, error) {
	var todo *model.Todo
	var index int
	for i, t := range r.todos {
		if fmt.Sprintf("%v", id) == t.ID {
			todo = t
			index = i
			break
		}
	}
	if todo == nil {
		return nil, errors.New("todo not found")
	}

	userExists := false
	for _, u := range r.users {
		if fmt.Sprintf("%v", updatedBy) == u.ID {
			userExists = true
			break
		}
	}
	if !userExists {
		return nil, errors.New("user not found")
	}

	r.todos = append(r.todos[:index], r.todos[index+1:]...)
	return todo, nil
}

// UserCreate is the resolver for the userCreate field.
func (r *mutationResolver) UserCreate(ctx context.Context, input model.NewUser) (*model.User, error) {
	randNumber, _ := rand.Int(rand.Reader, big.NewInt(100))
	user := &model.User{
		ID:   fmt.Sprintf("U%d", randNumber),
		Name: input.Name,
	}
	r.users = append(r.users, user)
	return user, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
